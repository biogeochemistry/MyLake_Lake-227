theme(legend.position = c(0.9,0.9))
p3
obs <- read.csv("Observed_IntegratedEpi_icefree.csv", header = T)
attach(obs)
colnames(obs) <- c("org.date","Year","Month","Day", "obs.TP","obs.chla","obs.TDP")
obs_temp <- read.csv("Observed_Temperature.csv")
attach(obs_temp)
obs_O2 <- read.csv("Observed_Oxygen.csv")
attach(obs_O2)
mod <- read.csv("Output_IntegratedEpi.csv", header = F)
colnames(mod) <- c("Year", "Month", "Day", "mod.chla", "mod.cyano", "mod.TDP", "mod.TP")
mod2 <- read.csv("Output_Depths.csv", header = F)
colnames(mod2) <- c("Year", "Month", "Day", "mod.Temp1m", "mod.Temp4m", "mod.Temp9m", "mod.Oxy1m", "mod.Oxy2m", "mod.Oxy3m", "mod.Oxy4m", "mod.Oxy5m", "mod.Oxy6m", "mod.Oxy7m", "mod.Oxy8m", "mod.Oxy9m", "mod.Oxy10m")
#Let's tidy! - part 1
library(tidyr)
library(magrittr)
obs <- obs %>%
unite(date, Year, Month, Day, sep = '-') #%>%
#filter(!is.na(obs.TP))
obs <- data.frame(obs, Month, Year)
obs <- na.omit(obs)
obs <- obs[,-1]
mod <- mod %>% unite(date, Year, Month, Day, sep = '-')
mod2 <- mod2 %>% unite(date, Year, Month, Day, sep = '-')
# Convert time object
obs$date <- as.Date(obs$date, format = "%Y-%m-%d") #Converts data to date structure
obs_temp$date <- as.Date(obs_temp$date) #, format = "%Y-%m-%d") #Converts data to date structure
mod$date <- as.Date(mod$date, format = "%Y-%m-%d") #Converts data to date structure
mod2$date <- as.Date(mod$date, format = "%Y-%m-%d") #Converts data to date structure
# tidy! - part 2: match model time and observational time
library(dplyr)
mod.match <- inner_join(obs,mod, by = "date")
mod2.match <- inner_join(obs_temp, mod2, by = "date")
obs.totaltempa <- data.frame(cbind(mod2.match$obs.Temp1m, mod2.match$obs.Temp4m, mod2.match$obs.Temp9m))
obs.totaltemp <- stack(obs.totaltempa)
mod.totaltempa <- data.frame(cbind(mod2.match$mod.Temp1m, mod2.match$mod.Temp4m, mod2.match$mod.Temp9m))
mod.totaltemp <- stack(mod.totaltempa)
totaltemp <- data.frame(cbind(obs.totaltemp[,1], mod.totaltemp[,1]))
colnames(totaltemp) <- c("TempObs","TempMod")
p <- ggplot(mod.match, aes(x = date)) +
geom_point(aes(y = obs.TP, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.TP, col = "Modeled"), size = 0.5) +
ylim(0,150) +
ylab(expression(Total ~ Phosphorus ~ (mu*g / L))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9))
p2 <- ggplot(mod.match, aes(x = date)) +
geom_point(aes(y = obs.TDP, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.TDP, col = "Modeled"), size = 0.5) +
ylim(0,50) +
ylab(expression(TDP ~ (mu*g / L))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9))
p3 <- ggplot(mod.match, aes(x = date)) +
geom_point(aes(y = obs.chla, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.chla, col = "Modeled"), size = 0.5) +
ylim(0,100) +
ylab(expression(Chlorophyll ~ a ~ (mu*g / L))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9))
p3
p2 <- ggplot(mod.match, aes(x = date)) +
geom_point(aes(y = obs.TDP, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.TDP, col = "Modeled"), size = 0.5) +
ylim(0,100) +
ylab(expression(TDP ~ (mu*g / L))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9))
p2
p
p4 <- ggplot(mod2.match, aes(x = date)) +
geom_point(aes(y = obs.Temp1m, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.Temp1m, col = "Modeled"), size = 0.5) +
ylim(0,30) +
ylab(expression("Temperature " ( degree*C))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9))
p5 <- ggplot(mod2.match, aes(x = date)) +
geom_point(aes(y = obs.Temp4m, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.Temp4m, col = "Modeled"), size = 0.5) +
ylim(0,30) +
ylab(expression("Temperature " ( degree*C))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9))
p6 <- ggplot(mod2.match, aes(x = date)) +
geom_point(aes(y = obs.Temp9m, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.Temp9m, col = "Modeled"), size = 0.5) +
ylim(0,10) +
ylab(expression("Temperature " ( degree*C))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9))
p7 <- ggplot(mod2.match, aes(x = date)) +
geom_point(aes(y = obs.Temp1m, col = "1m"), pch = 19, size = 1) +
geom_point(aes(y = obs.Temp4m, col = "4m"), pch = 19, size = 1) +
geom_point(aes(y = obs.Temp9m, col = "9m"), pch = 19, size = 1) +
geom_line(aes(y = mod.Temp1m, col = "1m"), size = 0.5) +
geom_line(aes(y = mod.Temp4m, col = "4m"), size = 0.5) +
geom_line(aes(y = mod.Temp9m, col = "9m"), size = 0.5) +
ylim(0,30) +
ylab(expression("Temperature " ( degree*C))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("1m", "4m", "9m"),
values = c("#6baed6", "#3182bd", "#08519c")) +
theme(legend.position = c(0.9,0.9))
p4
p5
p6
p7
q <- ggplot(mod.match, aes(x = obs.TP, y = mod.TP, color=Month)) +
geom_point(pch = 19, size = 1.5) +
geom_abline(slope=1, intercept=0) +
scale_x_continuous(limits=c(0,100)) + scale_y_continuous(limits=c(0,100)) +
xlab(expression(Total ~ Phosphorus ~ Observed ~ (mu*g / L))) +
ylab(expression(Total ~ Phosphorus ~ Modeled ~ (mu*g / L))) +
scale_color_distiller(palette="YlGnBu") +
theme(legend.position=c(0.9, 0.8))
#print(p)
q2 <- ggplot(mod.match, aes(x = obs.TDP, y = mod.TDP, color=Month)) +
geom_point(pch = 19, size = 1.5) +
geom_abline(slope=1, intercept=0) +
scale_x_continuous(limits=c(0,50)) + scale_y_continuous(limits=c(0,50)) +
xlab(expression(TDP ~ Observed ~ (mu*g / L))) +
ylab(expression(TDP ~ Modeled ~ (mu*g / L))) +
scale_color_distiller(palette="YlGnBu") +
theme(legend.position=c(0.9, 0.8))
#print(p2)
q3 <- ggplot(mod.match, aes(x = obs.chla, y = mod.chla, color=Month)) +
geom_point(pch = 19, size = 1.5) +
geom_abline(slope=1, intercept=0) + #(intercept = mod.lm[[1]][[1]], slope = mod.lm[[1]][[2]]) +
scale_x_continuous(limits=c(0,100)) + scale_y_continuous(limits=c(0,100)) +
xlab(expression(Chlorophyll ~ a ~ Observed ~ (mu*g / L))) +
ylab(expression(Chlorophyll ~ a ~ Modeled ~ (mu*g / L))) +
scale_color_distiller(palette="YlGnBu") +
theme(legend.position=c(0.9, 0.8))
#print(p3)
q4 <- ggplot(mod.match, aes(x = obs.chla, y = mod.chla, color=Year)) +
geom_point(pch = 19, size = 1.5) +
geom_abline(slope=1, intercept=0) +
scale_x_continuous(limits=c(0,100)) + scale_y_continuous(limits=c(0,100)) +
xlab(expression(Chlorophyll ~ a ~ Observed ~ (mu*g / L))) +
ylab(expression(Chlorophyll ~ a ~ Modeled ~ (mu*g / L))) +
scale_color_distiller(palette="YlGnBu") +
theme(legend.position=c(0.9, 0.8))
q5 <- ggplot(mod.match, aes(x = obs.TP, y = mod.TP, color=Year)) +
geom_point(pch = 19, size = 1.5) +
geom_abline(slope=1, intercept=0) +
scale_x_continuous(limits=c(0,100)) + scale_y_continuous(limits=c(0,100)) +
xlab(expression(TP ~ Observed ~ (mu*g / L))) +
ylab(expression(TP ~ Modeled ~ (mu*g / L))) +
scale_color_distiller(palette="YlGnBu") +
theme(legend.position=c(0.9, 0.8))
q6 <- ggplot(totaltemp, aes(x = TempObs, y = TempMod)) +
geom_point(pch = 19, size = 1.5) +
geom_abline(slope=1, intercept=0) +
scale_x_continuous(limits=c(0,30)) + scale_y_continuous(limits=c(0,30)) +
xlab(expression("Temperature Observed " ( degree*C))) +
ylab(expression("Temperature Modeled " ( degree*C))) +
scale_color_distiller(palette="YlGnBu") +
theme(legend.position=c(0.9, 0.8))
q
q
p2
q2
q3
q4
a5
q5
q6
p
p2
p3
p
p3
p2
p
p3
p
p2
q2
q3
p3
setwd("/Users/krsalkgu/Documents/SourceTree/L227/Postproc_code/L227")
NtoPLake <- read.csv("NP_Stoichiometry_L227.csv")
attach(NtoPLake)
head(NtoPLake)
NtoPInflow <- read.csv("NP_Stoichiometry_Inflow.csv")
attach(NtoPInflow)
head(NtoPInflow)
#Change concentrations from mass (ug/L) to molar (umol/L)
Fert_TP_molar <- Fert_TP/30.97
Inflow_TP_molar <- Inflow_TP/30.97
Fert_TN_molar <- Fert_TN/14.01
Inflow_TN_molar <- Inflow_TN/14.01
NO3_molar <- NO3/14.01
NH4_molar <- NH4/14.01
DIN_molar <- NO3_molar + NH4_molar
PN_molar <- PN/14.01
TDN_molar <- TDN/14.01
PP_molar <- PP/30.97
TDP_molar <- TDP/30.97
TN_molar <- TDN_molar + PN_molar
TP_molar <- TDP_molar + PP_molar
#Combine inflows + fertilization
Input_TN_molar <- Fert_TN_molar + Inflow_TN_molar
Input_TP_molar <- Fert_TP_molar + Inflow_TP_molar
#Create N:P stoichiometric ratios in lake and inputs
Fert_NtoP <- Fert_TN_molar/Fert_TP_molar
Inflow_NtoP <- Inflow_TN_molar/Inflow_TP_molar
Input_NtoP <- Input_TN_molar/Input_TP_molar
DINtoTDP <- DIN_molar/TDP_molar
TDNtoTDP <- TDN_molar/TDP_molar
PNtoPP <- PN_molar/PP_molar
TNtoTP <- TN_molar/TP_molar
#Convert dates from factor to date format
Datelake <- as.Date(NtoPLake$Date, "%m/%d/%y")
Dateinflow <- as.Date(NtoPInflow$Date, "%m/%d/%Y")
#Create data frames for N:P stoichiometry in lake and inflows
NtoPinsitu <- data.frame(Datelake, TNtoTP, PNtoPP, DINtoTDP, TDNtoTDP)
NtoPinput <- data.frame(Dateinflow, Fert_NtoP, Inflow_NtoP, Input_NtoP)
library(ggplot2)
theme_std <- function (base_size = 16, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(axis.ticks = element_line(colour = "black", size = 1),
legend.key = element_rect(colour = "white"),
panel.background = element_rect(fill = "white", colour = NA),
panel.border = element_rect(fill = NA, colour = NA),
axis.line = element_line(size = 0.5, colour = "black"),
panel.grid.major = element_line(NA),
panel.grid.minor = element_line(NA),
strip.background = element_rect(fill = "grey80", colour = "grey50", size = 0.2),
axis.text  = element_text(size=rel(0.9)),
axis.title.x = element_text(margin = unit(c(3, 0, 0, 0), "mm"),size=rel(1)),
axis.title.y = element_text(margin = unit(c(0, 3, 0, 0), "mm"),size=rel(1), angle = 90),
strip.text = element_text(size = rel(1.15), colour = "black", face = "bold"),
plot.margin=unit(c(10,10,10,10),"pt"))}
theme_set(theme_std())
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = TNtoTP), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = TDNtoTDP), size = 0.5) +
ylim(0,500) +
ylab(expression(TDN:TDP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = PNtoPP), size = 0.5) +
ylim(0,200) +
ylab(expression(PN:PP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinput, aes(x = Dateinflow)) +
geom_point(aes(y = Inflow_NtoP), size = 0.5) +
ylab(expression(InflowN:InflowP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinput, aes(x = Dateinflow)) +
geom_point(aes(y = Input_NtoP), size = 0.5) +
ylim(0,50) +
ylab(expression(InputN:InputP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinput, aes(x = Dateinflow)) +
geom_point(aes(y = Fert_NtoP), size = 0.5) +
ylim(0,50) +
ylab(expression(FertN:FertP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinput, aes(x = Dateinflow)) +
geom_point(aes(y = Input_NtoP), size = 0.5) +
ylim(0,50) +
ylab(expression(InputN:InputP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = TDNtoTDP), size = 0.5) +
ylim(0,500) +
ylab(expression(TDN:TDP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinput, aes(x = Dateinflow)) +
geom_point(aes(y = Input_NtoP), size = 0.5) +
ylim(0,50) +
ylab(expression(InputN:InputP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
library(strucchange)
a = breakpoints (TNtoTP ~ Datelake, data = NtoPinsitu)
breakdates(a, format.times=T)
TNtoTPbydate <- lm(TNtoTP ~ Datelake)
a = breakpoints (Input_NtoP ~ Datelake, data = NtoPinsitu)
a = breakpoints (Input_NtoP ~ Dateinflow, data = NtoPinput)
a
setwd("/Users/krsalkgu/Documents/SourceTree/L227/IO/Inflow_for_interpolation.csv")
setwd("/Users/krsalkgu/Documents/SourceTree/L227/IO/Inflow_for_interpolation.csv")
setwd("/Users/krsalkgu/Documents/SourceTree/L227/IO")
dataset = read.csv("Inflow_for_interpolation.csv")
attach(dataset)
head(dataset)
install.packages("zoo")
install.packages("zoo")
library(zoo)
dataset = read.csv("Inflow_for_interpolation.csv")
attach(dataset)
head(dataset)
na.aggregate(Cloud)
CloudI = na.aggregate(Cloud)
CloudI
mean(Cloud)
Cloud2 = na.omit(Cloud)
mean(Cloud2)
CloudI[1374]
CloudI[1374:1462]
CloudI[1372:1462]
head(dataset)
HumidityI = na.aggregate(Humidity)
AirPressureI = na.aggregate(AirPressure)
WindSpeedI = na.aggregate(WindSpeed)
pHI = na.aggregate(pH)
pHI
pH2 = na.omit(pH)
mean(pH2)
head(dataset)
AirTempI = na.approx(AirTemp)
AirTempI
head(dataset)
InflowTempI = na.approx(InflowTemp)
TPI = na.approx(TP)
TPI
DOCI = na.approx(DOC)
DOCI
NO3I = na.approx(NO3)
NO3I
DOCI = na.approx(DOC)
NO3I = na.approx(NO3)
NH4I = na.approx(NH4)
SO4I = na.approx(SO4)
Fe2I = na.approx(Fe2)
Ca2I = na.approx(Ca2)
Fe3I = na.approx(Fe3)
SiO2I = na.approx(SiO2)
dataset = read.csv("Inflow_for_interpolation.csv")
attach(dataset)
head(dataset)
library(zoo)
SiO2I = na.approx(SiO2)
head(dataset)
InterpolatedData = data.frame(Year, Month, Day, CloudI, AirTempI, HumidityI, AirPressureI, WindSpeedI, InflowTempI, TPI, DOCI, NO3I, NH4I, SO4I, Fe2I, Ca2I, pHI, Fe3I, SiO2I)
length(Year)
Length(TPI)
length(TPI)
length(TP)
TPI = na.approx(TP, na.rm=FALSE)
length(TPI)
length(pHI)
length(HumidityI)
TPI = na.approx(TP, na.rm=FALSE)
DOCI = na.approx(DOC, na.rm=FALSE)
NO3I = na.approx(NO3, na.rm=FALSE)
NH4I = na.approx(NH4, na.rm=FALSE)
SO4I = na.approx(SO4, na.rm=FALSE)
Fe2I = na.approx(Fe2, na.rm=FALSE)
Ca2I = na.approx(Ca2, na.rm=FALSE)
Fe3I = na.approx(Fe3, na.rm=FALSE)
SiO2I = na.approx(SiO2, na.rm=FALSE)
InterpolatedData = data.frame(Year, Month, Day, CloudI, AirTempI, HumidityI, AirPressureI, WindSpeedI, InflowTempI, TPI, DOCI, NO3I, NH4I, SO4I, Fe2I, Ca2I, pHI, Fe3I, SiO2I)
write.csv(InterpolatedData, "Inflow_Interpolated.csv")
TPI
TPI = na.approx(TP, na.rm=TRUE)
TPI
length(TPI)
dataset = read.csv("Inflow_for_interpolation.csv")
attach(dataset)
head(dataset)
library(zoo)
TPI = na.approx(TP)
length(TPI)
length(Year)
dataset = read.csv("Inflow_for_interpolation.csv")
attach(dataset)
head(dataset)
library(zoo)
TPI = na.approx(TP)
length(TPI)
CloudI = na.aggregate(Cloud)
#Check
#Cloud2 = na.omit(Cloud)
#mean(Cloud2)
#CloudI[1372:1462]
HumidityI = na.aggregate(Humidity)
AirPressureI = na.aggregate(AirPressure)
WindSpeedI = na.aggregate(WindSpeed)
pHI = na.aggregate(pH)
#Variables interpolated linearly
AirTempI = na.approx(AirTemp)
InflowTempI = na.approx(InflowTemp)
TPI = na.approx(TP)
DOCI = na.approx(DOC)
NO3I = na.approx(NO3)
NH4I = na.approx(NH4)
SO4I = na.approx(SO4)
Fe2I = na.approx(Fe2)
Ca2I = na.approx(Ca2)
Fe3I = na.approx(Fe3)
SiO2I = na.approx(SiO2)
InterpolatedData = data.frame(Year, Month, Day, CloudI, AirTempI, HumidityI, AirPressureI, WindSpeedI, InflowTempI, TPI, DOCI, NO3I, NH4I, SO4I, Fe2I, Ca2I, pHI, Fe3I, SiO2I)
write.csv(InterpolatedData, "Inflow_Interpolated.csv")
dataset = read.csv("Inflow_for_interpolation.csv")
attach(dataset)
head(dataset)
CloudI = na.aggregate(Cloud)
#Check
#Cloud2 = na.omit(Cloud)
#mean(Cloud2)
#CloudI[1372:1462]
HumidityI = na.aggregate(Humidity)
AirPressureI = na.aggregate(AirPressure)
WindSpeedI = na.aggregate(WindSpeed)
pHI = na.aggregate(pH)
#Variables interpolated linearly
AirTempI = na.approx(AirTemp)
InflowTempI = na.approx(InflowTemp)
TPI = na.approx(TP)
DOCI = na.approx(DOC)
NO3I = na.approx(NO3)
NH4I = na.approx(NH4)
SO4I = na.approx(SO4)
Fe2I = na.approx(Fe2)
Ca2I = na.approx(Ca2)
Fe3I = na.approx(Fe3)
SiO2I = na.approx(SiO2)
#Write an output file
InterpolatedData = data.frame(Year, Month, Day, CloudI, AirTempI, HumidityI, AirPressureI, WindSpeedI, InflowTempI, TPI, DOCI, NO3I, NH4I, SO4I, Fe2I, Ca2I, pHI, Fe3I, SiO2I)
write.csv(InterpolatedData, "Inflow_Interpolated.csv")
CloudI = na.aggregate(Cloud)
#Check
#Cloud2 = na.omit(Cloud)
#mean(Cloud2)
#CloudI[1372:1462]
HumidityI = na.aggregate(Humidity)
AirPressureI = na.aggregate(AirPressure)
WindSpeedI = na.aggregate(WindSpeed)
pHI = na.aggregate(pH)
#Variables interpolated linearly
AirTempI = na.approx(AirTemp)
InflowTempI = na.approx(InflowTemp)
TPI = na.approx(TP)
DOCI = na.approx(DOC)
NO3I = na.approx(NO3)
NH4I = na.approx(NH4)
SO4I = na.approx(SO4)
Fe2I = na.approx(Fe2)
Ca2I = na.approx(Ca2)
Fe3I = na.approx(Fe3)
SiO2I = na.approx(SiO2)
#Write an output file
InterpolatedData = data.frame(Year, Month, Day, CloudI, AirTempI, HumidityI, AirPressureI, WindSpeedI, InflowTempI, TPI, DOCI, NO3I, NH4I, SO4I, Fe2I, Ca2I, pHI, Fe3I, SiO2I)
write.csv(InterpolatedData, "Inflow_Interpolated.csv")
head(dataset)
dataset = read.csv("Inflow_for_interpolation.csv")
attach(dataset)
head(dataset)
library(zoo)
CloudI = na.aggregate(Cloud)
#Check
#Cloud2 = na.omit(Cloud)
#mean(Cloud2)
#CloudI[1372:1462]
HumidityI = na.aggregate(Humidity)
AirPressureI = na.aggregate(AirPressure)
WindSpeedI = na.aggregate(WindSpeed)
pHI = na.aggregate(pH)
#Variables interpolated linearly
AirTempI = na.approx(AirTemp)
InflowTempI = na.approx(InflowTemp)
TPI = na.approx(TP)
DOCI = na.approx(DOC)
NO3I = na.approx(NO3)
NH4I = na.approx(NH4)
SO4I = na.approx(SO4)
Fe2I = na.approx(Fe2)
Ca2I = na.approx(Ca2)
Fe3I = na.approx(Fe3)
SiO2I = na.approx(SiO2)
#Write an output file
InterpolatedData = data.frame(Year, Month, Day, CloudI, AirTempI, HumidityI, AirPressureI, WindSpeedI, InflowTempI, TPI, DOCI, NO3I, NH4I, SO4I, Fe2I, Ca2I, pHI, Fe3I, SiO2I)
write.csv(InterpolatedData, "Inflow_Interpolated.csv")
