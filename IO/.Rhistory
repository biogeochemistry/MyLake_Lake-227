values = c("black", "red")) +
theme(legend.position = c(0.9,0.9))
p5
p6 <- ggplot(mod.match.temp, aes(x = date)) +
geom_point(aes(y = obs.Temp9m, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.Temp9m, col = "Modeled"), size = 0.5) +
ylim(0,30) +
ylab(expression("Temperature " ( degree*C))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9))
p6
p6 <- ggplot(mod.match.temp, aes(x = date)) +
geom_point(aes(y = obs.Temp9m, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.Temp9m, col = "Modeled"), size = 0.5) +
ylim(0,10) +
ylab(expression("Temperature " ( degree*C))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9))
p6
mod.lm <- lm(mod.match$mod.TP ~ mod.match$obs.TP)
summary(mod.lm)
head(mod.match.temp)
p6 <- ggplot(mod.match.temp, aes(x = obs.Temp1m, y = mod.temp.1m, color=Year)) +
geom_point(pch = 19, size = 1.5) +
geom_abline(slope=1, intercept=0) + #(intercept = mod.lm[[1]][[1]], slope = mod.lm[[1]][[2]]) +
scale_x_continuous(limits=c(0,100)) + scale_y_continuous(limits=c(0,100)) +
xlab(expression(TP ~ Observed ~ (mu*g / L))) +
ylab(expression(TP ~ Modeled ~ (mu*g / L))) +
#geom_text(x = 175, y = 50, label = paste("y = ", round(mod.lm[[1]][[2]], digits = 2),"x + ",
#                                                  round(mod.lm[[1]][[1]], digits = 2))) +
#geom_text(x = 175, y = 45, label = paste("R2","=",round(summary(mod.lm)[8][[1]], digits = 4)))
scale_color_distiller(palette="YlGnBu") +
theme(legend.position=c(0.9, 0.8))
p6
p6 <- ggplot(mod.match.temp, aes(x = obs.Temp1m, y = mod.Temp1m, color=Year)) +
geom_point(pch = 19, size = 1.5) +
geom_abline(slope=1, intercept=0) + #(intercept = mod.lm[[1]][[1]], slope = mod.lm[[1]][[2]]) +
scale_x_continuous(limits=c(0,100)) + scale_y_continuous(limits=c(0,100)) +
xlab(expression(TP ~ Observed ~ (mu*g / L))) +
ylab(expression(TP ~ Modeled ~ (mu*g / L))) +
#geom_text(x = 175, y = 50, label = paste("y = ", round(mod.lm[[1]][[2]], digits = 2),"x + ",
#                                                  round(mod.lm[[1]][[1]], digits = 2))) +
#geom_text(x = 175, y = 45, label = paste("R2","=",round(summary(mod.lm)[8][[1]], digits = 4)))
scale_color_distiller(palette="YlGnBu") +
theme(legend.position=c(0.9, 0.8))
p6
p6 <- ggplot(mod.match.temp, aes(x = obs.Temp1m, y = mod.Temp1m)) +
geom_point(pch = 19, size = 1.5) +
geom_abline(slope=1, intercept=0) + #(intercept = mod.lm[[1]][[1]], slope = mod.lm[[1]][[2]]) +
scale_x_continuous(limits=c(0,100)) + scale_y_continuous(limits=c(0,100)) +
xlab(expression(TP ~ Observed ~ (mu*g / L))) +
ylab(expression(TP ~ Modeled ~ (mu*g / L))) +
#geom_text(x = 175, y = 50, label = paste("y = ", round(mod.lm[[1]][[2]], digits = 2),"x + ",
#                                                  round(mod.lm[[1]][[1]], digits = 2))) +
#geom_text(x = 175, y = 45, label = paste("R2","=",round(summary(mod.lm)[8][[1]], digits = 4)))
scale_color_distiller(palette="YlGnBu") +
theme(legend.position=c(0.9, 0.8))
p6
obs.totaltemp <- rbind(mod.match.temp$obs.Temp1m, mod.match.temp$obs.Temp4m, mod.match.temp$obs.Temp9m)
dim(obs.totaltemp)
dim(mod.match.temp)
obs.totaltemp <- cbind(mod.match.temp$obs.Temp1m, mod.match.temp$obs.Temp4m, mod.match.temp$obs.Temp9m)
dim(obs.totaltemp)
obs.totaltemp
obs.totaltemp <- stack(obs.totaltemp)
obs.totaltemp <- cbind(mod.match.temp$obs.Temp1m, mod.match.temp$obs.Temp4m, mod.match.temp$obs.Temp9m)
obs.totaltemp <- stack(obs.totaltemp)
dim(obs.totaltemp)
obs.totaltemp <- cbind(mod.match.temp$obs.Temp1m, mod.match.temp$obs.Temp4m, mod.match.temp$obs.Temp9m)
class(obs.totaltemp)
obs.totaltemp <- data.frame(cbind(mod.match.temp$obs.Temp1m, mod.match.temp$obs.Temp4m, mod.match.temp$obs.Temp9m))
class(obs.totaltemp)
obs.totaltempa <- data.frame(cbind(mod.match.temp$obs.Temp1m, mod.match.temp$obs.Temp4m, mod.match.temp$obs.Temp9m))
obs.totaltemp <- stack(obs.totaltemp)
obs.totaltemp <- stack(obs.totaltempa)
obs.totaltemp
dim(obs.totaltemp)
mod.totaltempa <- data.frame(cbind(mod.match.temp$mod.Temp1m, mod.match.temp$mod.Temp4m, mod.match.temp$mod.Temp9m))
mod.totaltemp <- stack(mod.totaltempa)
obs.totaltemp[1,]
obs.totaltemp[,1]
totaltemp <- cbind(obs.totaltemp[,1], mod.totaltemp[,1])
head(totaltemp)
colnames(totaltemp) <- c("TempObs","TempMod")
head(totaltemp)
p6 <- ggplot(totaltemp, aes(x = TempObs, y = TempMod)) +
geom_point(pch = 19, size = 1.5) +
geom_abline(slope=1, intercept=0) + #(intercept = mod.lm[[1]][[1]], slope = mod.lm[[1]][[2]]) +
scale_x_continuous(limits=c(0,100)) + scale_y_continuous(limits=c(0,100)) +
xlab(expression(TP ~ Observed ~ (mu*g / L))) +
ylab(expression(TP ~ Modeled ~ (mu*g / L))) +
scale_color_distiller(palette="YlGnBu") +
theme(legend.position=c(0.9, 0.8))
totaltemp <- data.frame(cbind(obs.totaltemp[,1], mod.totaltemp[,1]))
class(totaltemp)
p6 <- ggplot(totaltemp, aes(x = TempObs, y = TempMod)) +
geom_point(pch = 19, size = 1.5) +
geom_abline(slope=1, intercept=0) + #(intercept = mod.lm[[1]][[1]], slope = mod.lm[[1]][[2]]) +
scale_x_continuous(limits=c(0,100)) + scale_y_continuous(limits=c(0,100)) +
xlab(expression(TP ~ Observed ~ (mu*g / L))) +
ylab(expression(TP ~ Modeled ~ (mu*g / L))) +
scale_color_distiller(palette="YlGnBu") +
theme(legend.position=c(0.9, 0.8))
p6
colnames(totaltemp) <- c("TempObs","TempMod")
p6 <- ggplot(totaltemp, aes(x = TempObs, y = TempMod)) +
geom_point(pch = 19, size = 1.5) +
geom_abline(slope=1, intercept=0) + #(intercept = mod.lm[[1]][[1]], slope = mod.lm[[1]][[2]]) +
scale_x_continuous(limits=c(0,100)) + scale_y_continuous(limits=c(0,100)) +
xlab(expression(TP ~ Observed ~ (mu*g / L))) +
ylab(expression(TP ~ Modeled ~ (mu*g / L))) +
scale_color_distiller(palette="YlGnBu") +
theme(legend.position=c(0.9, 0.8))
p6
p6 <- ggplot(totaltemp, aes(x = TempObs, y = TempMod)) +
geom_point(pch = 19, size = 1.5) +
geom_abline(slope=1, intercept=0) + #(intercept = mod.lm[[1]][[1]], slope = mod.lm[[1]][[2]]) +
scale_x_continuous(limits=c(0,30)) + scale_y_continuous(limits=c(0,30)) +
xlab(expression("Temperature Observed " ( degree*C))) +
ylab(expression("Temperature Modeled " ( degree*C))) +
scale_color_distiller(palette="YlGnBu") +
theme(legend.position=c(0.9, 0.8))
p6
tempregression <- lm(TempObs ~ TempMod)
TempObs
head(totaltemp)
tempregression <- lm(totaltemp$TempObs ~ totaltemp$TempMod)
summary(tempregression)
mse <- mean(residuals(tempregression)^2)
rmse <- sqrt(mse)
p6
obs <- read.csv("Observed_IntegratedEpi.csv", header = T)
attach(obs)
colnames(obs) <- c("org.date","Year","Month","Day", "obs.TP","obs.chla","obs.TDP")
obs_temp <- read.csv("Observed_Temperature.csv")
attach(obs_temp)
mod <- read.csv("Output_IntegratedEpi.csv", header = F)
colnames(mod) <- c("Year","Month","Day","ML.date","mod.chla","mod.TDP","mod.TP", "mod.Temp1m", "mod.Temp4m", "mod.Temp9m")
#Let's tidy! - part 1
library(tidyr)
library(magrittr)
obs <- obs %>%
unite(date, Year, Month, Day, sep = '-') #%>%
#filter(!is.na(obs.TP))
obs <- data.frame(obs, Month, Year)
obs <- na.omit(obs)
obs <- obs[,-1]
mod <- mod %>% unite(date, Year, Month, Day, sep = '-')
mod <- mod[,-2]
# Convert time object
obs$date <- as.Date(obs$date, format = "%Y-%m-%d") #Converts data to date structure
obs_temp$date <- as.Date(obs_temp$date) #, format = "%Y-%m-%d") #Converts data to date structure
mod$date <- as.Date(mod$date, format = "%Y-%m-%d") #Converts data to date structure
# tidy! - part 2: match model time and observational time
library(dplyr)
mod.match <- inner_join(obs,mod, by = "date")
mod.match.temp <- inner_join(obs_temp, mod, by = "date")
obs.totaltempa <- data.frame(cbind(mod.match.temp$obs.Temp1m, mod.match.temp$obs.Temp4m, mod.match.temp$obs.Temp9m))
obs.totaltemp <- stack(obs.totaltempa)
mod.totaltempa <- data.frame(cbind(mod.match.temp$mod.Temp1m, mod.match.temp$mod.Temp4m, mod.match.temp$mod.Temp9m))
mod.totaltemp <- stack(mod.totaltempa)
totaltemp <- data.frame(cbind(obs.totaltemp[,1], mod.totaltemp[,1]))
colnames(totaltemp) <- c("TempObs","TempMod")
p4 <- ggplot(mod.match.temp, aes(x = date)) +
geom_point(aes(y = obs.Temp1m, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.Temp1m, col = "Modeled"), size = 0.5) +
ylim(0,30) +
ylab(expression("Temperature " ( degree*C))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9))
p4
p5 <- ggplot(mod.match.temp, aes(x = date)) +
geom_point(aes(y = obs.Temp4m, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.Temp4m, col = "Modeled"), size = 0.5) +
ylim(0,30) +
ylab(expression("Temperature " ( degree*C))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9))
p6 <- ggplot(mod.match.temp, aes(x = date)) +
geom_point(aes(y = obs.Temp9m, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.Temp9m, col = "Modeled"), size = 0.5) +
ylim(0,10) +
ylab(expression("Temperature " ( degree*C))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9))
p5
p6
tempregression <- lm(totaltemp$TempObs ~ totaltemp$TempMod)
summary(tempregression)
mse <- mean(residuals(tempregression)^2)
rmse <- sqrt(mse)
p6 <- ggplot(totaltemp, aes(x = TempObs, y = TempMod)) +
geom_point(pch = 19, size = 1.5) +
geom_abline(slope=1, intercept=0) +
scale_x_continuous(limits=c(0,30)) + scale_y_continuous(limits=c(0,30)) +
xlab(expression("Temperature Observed " ( degree*C))) +
ylab(expression("Temperature Modeled " ( degree*C))) +
scale_color_distiller(palette="YlGnBu") +
theme(legend.position=c(0.9, 0.8))
p6
rmse
p6
setwd("/Users/krsalkgu/Documents/SourceTree/Lake227/Postproc_code/L227")
# Install packages for the document
## install.packages("ggplot2")
library(ggplot2)
# Package options
library(knitr)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
## ggplot theme and figure parameters
# set the theme ####
theme_std <- function (base_size = 16, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(axis.ticks = element_line(colour = "black", size = 1),
legend.key = element_rect(colour = "white"),
panel.background = element_rect(fill = "white", colour = NA),
panel.border = element_rect(fill = NA, colour = NA),
axis.line = element_line(size = 0.5, colour = "black"),
panel.grid.major = element_line(NA),
panel.grid.minor = element_line(NA),
strip.background = element_rect(fill = "grey80", colour = "grey50", size = 0.2),
axis.text  = element_text(size=rel(0.9)),
axis.title.x = element_text(margin = unit(c(3, 0, 0, 0), "mm"),size=rel(1)),
axis.title.y = element_text(margin = unit(c(0, 3, 0, 0), "mm"),size=rel(1), angle = 90),
strip.text = element_text(size = rel(1.15), colour = "black", face = "bold"),
plot.margin=unit(c(10,10,10,10),"pt")
)
}
theme_set(theme_std())
#
obs <- read.csv("Observed_IntegratedEpi_icefree.csv", header = T)
attach(obs)
colnames(obs) <- c("org.date","Year","Month","Day", "obs.TP","obs.chla","obs.TDP")
obs_temp <- read.csv("Observed_Temperature.csv")
attach(obs_temp)
obs_O2 <- read.csv("Observed_Oxygen.csv")
attach(obs_O2)
obs_Fe <- read.csv("Observed_Fe.csv")
attach(obs_Fe)
mod <- read.csv("Output_IntegratedEpi.csv", header = F)
colnames(mod) <- c("Year", "Month", "Day", "mod.chla", "mod.cyano", "mod.TDP", "mod.TP")
mod2 <- read.csv("Output_Depths.csv", header = F)
colnames(mod2) <- c("Year", "Month", "Day", "mod.Temp1m", "mod.Temp4m", "mod.Temp9m", "mod.Oxy2m", "mod.Oxy3m", "mod.Oxy4m", "mod.Oxy6m", "mod.Oxy8m", "mod.Oxy10m", "mod.Fe4m", "mod.Fe6m", "mod.Fe8m", "mod.Fe10m")
#Let's tidy! - part 1
library(tidyr)
library(magrittr)
obs <- obs %>%
unite(date, Year, Month, Day, sep = '-') #%>%
#filter(!is.na(obs.TP))
obs <- data.frame(obs, Month, Year)
obs <- na.omit(obs)
obs <- obs[,-1]
mod <- mod %>% unite(date, Year, Month, Day, sep = '-')
mod2 <- mod2 %>% unite(date, Year, Month, Day, sep = '-')
# Convert time object
obs$date <- as.Date(obs$date, format = "%Y-%m-%d") #Converts data to date structure
obs_temp$date <- as.Date(obs_temp$date) #, format = "%Y-%m-%d") #Converts data to date structure
obs_O2$date <- as.Date(obs_O2$date, format = "%d/%m/%y") #Converts data to date structure
obs_Fe$date <- as.Date(obs_Fe$date, format = "%d/%m/%y") #Converts data to date structure
mod$date <- as.Date(mod$date, format = "%Y-%m-%d") #Converts data to date structure
mod2$date <- as.Date(mod$date, format = "%Y-%m-%d") #Converts data to date structure
# tidy! - part 2: match model time and observational time
library(dplyr)
mod.match <- inner_join(obs,mod, by = "date")
mod2.match <- inner_join(obs_temp, mod2, by = "date")
mod3.match <- inner_join(obs_O2, mod2, by = "date")
mod4.match <- inner_join(obs_Fe, mod2, by = "date")
obs.totaltempa <- data.frame(cbind(mod2.match$obs.Temp1m, mod2.match$obs.Temp4m, mod2.match$obs.Temp9m))
obs.totaltemp <- stack(obs.totaltempa)
mod.totaltempa <- data.frame(cbind(mod2.match$mod.Temp1m, mod2.match$mod.Temp4m, mod2.match$mod.Temp9m))
mod.totaltemp <- stack(mod.totaltempa)
totaltemp <- data.frame(cbind(obs.totaltemp[,1], mod.totaltemp[,1]))
colnames(totaltemp) <- c("TempObs","TempMod")
ggplot(mod2.match, aes(x = date)) +
geom_point(aes(y = obs.Temp1m, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.Temp1m, col = "Modeled"), size = 0.5) +
ylim(0,30) +
ylab(expression("Temperature " ( degree*C))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9)) #temp 1m by time
p4 <- ggplot(mod2.match, aes(x = date)) +
geom_point(aes(y = obs.Temp1m, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.Temp1m, col = "Modeled"), size = 0.5) +
ylim(0,30) +
ylab(expression("Temperature " ( degree*C))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9)) #temp 1m by time
p4
p5 <- ggplot(mod2.match, aes(x = date)) +
geom_point(aes(y = obs.Temp4m, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.Temp4m, col = "Modeled"), size = 0.5) +
ylim(0,30) +
ylab(expression("Temperature " ( degree*C))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9)) #temp 4m by time
p5
p6 <- ggplot(mod2.match, aes(x = date)) +
geom_point(aes(y = obs.Temp9m, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.Temp9m, col = "Modeled"), size = 0.5) +
ylim(0,10) +
ylab(expression("Temperature " ( degree*C))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9)) #temp 9m by time
p6
tempregression <- lm(mod2.match$obs.Temp1m ~ mod2.match$mod.Temp1m)
summary(tempregression)
mse <- mean(residuals(tempregression)^2)
rmse <- sqrt(mse)
rmse
tempregression <- lm(mod2.match$obs.Temp9m ~ mod2.match$mod.Temp9m)
summary(tempregression)
mse <- mean(residuals(tempregression)^2)
rmse <- sqrt(mse)
rmse
plot(mod2.match$obs.Temp9m ~ mod2.match$mod.Temp9m)
p6
library(plyr)
setwd("~/Documents/SourceTree/Lake227/IO")
humidity <- read.csv(Humidity_2010to2016.csv)
humidity <- read.csv("Humidity_2010to2016.csv")
head(humidity)
help(ddply)
humiditydaily <- ddply(humidity, .(measurement.date), summarize, value = mean(relative.humidity))
View(humiditydaily)
View(humidity)
humidity <- read.csv("Humidity_2010to2016.csv")
head(humidity)
humidity <- read.csv("Humidity_2010to2016.csv")
humiditydaily <- ddply(humidity, .(measurement.date), summarize, value = mean(relative.humidity))
View(humiditydaily)
humiditydaily <- ddply(humidity, .(measurement.date), summarize, dailyavghumidity = mean(relative.humidity))
humiditydaily$measurement.date <- as.Date(humiditydaily$measurement.date, format = "%d/%m/%Y")
View(humiditydaily)
humiditydaily <- ddply(humidity, .(measurement.date), summarize, dailyavghumidity = mean(relative.humidity))
humiditydaily$measurement.date <- as.Date(humiditydaily$measurement.date, format = "%d/%m/%y")
View(humiditydaily)
humiditydaily <- arrange(humidity$measurement.date)
class(humiditydaily)
humiditydaily <- arrange(humiditydaily, measurement.date)
View(humiditydaily)
humiditydaily$measurement.date <- round(humiditydaily$measurement.date, digits = 1)
View(humiditydaily)
humiditydaily$dailyavghumidity <- round(humiditydaily$dailyavghumidity, digits = 1)
View(humiditydaily)
write.csv(humiditydaily, file = "Humidity_Daily_2010to2016.csv ", row.names = F)
View(humiditydaily)
write.csv(humiditydaily, file = "Humidity_Daily_2010to2016.csv", row.names = F)
humidity <- read.csv("Humidity_Hourly_2010to2016.csv")
head(humidity)
humiditydaily <- ddply(humidity, .(measurement.date), summarize, dailyavghumidity = mean(relative.humidity))
help(as.Date)
View(humidity)
humiditydaily$measurement.date <- as.Date(humiditydaily$measurement.date, format = "%d/%m/%y")
humiditydaily <- ddply(humidity, .(measurement.date), summarize, dailyavghumidity = mean(relative.humidity))
humiditydaily$measurement.date <- as.Date(humiditydaily$measurement.date, format = "%d/%m/%y")
humiditydaily <- arrange(humiditydaily, measurement.date)
humiditydaily$dailyavghumidity <- round(humiditydaily$dailyavghumidity, digits = 1)
View(humiditydaily)
humiditydaily <- ddply(humidity, .(measurement.date), summarize, dailyavghumidity = mean(relative.humidity))
View(humiditydaily)
head(humiditydaily)
humiditydaily$measurement.date <- as.Date(humiditydaily$measurement.date, format = "%m/%d/%y")
humiditydaily <- arrange(humiditydaily, measurement.date)
View(humiditydaily)
View(humidity)
humiditydaily$dailyavghumidity <- round(humiditydaily$dailyavghumidity, digits = 1)
write.csv(humiditydaily, file = "Humidity_Daily_2010to2016.csv", row.names = F)
read.csv()
humidity <- read.csv("L239_InflowVolume_2010to2016.csv")
L239inflow <- read.csv("L239_InflowVolume_2010to2016.csv")
View(L239inflow)
head(L239inflow)
L239inflowmerged <- ddply(L239inflow, .(date), summarize, inflow = mean(mean.daily.discharge))
View(L239inflowmerged)
L239inflowmerged$date <- as.Date(L239inflowmerged$date, format = "%m/%d/%y")
L239inflowmerged <- arrange(L239inflowmerged, date)
View(L239inflowmerged)
View(L239inflowmerged)
L239inflowmerged$inflow <- L239inflowmerged$inflow * 60 * 60 * 24
View(L239inflowmerged)
L239inflowmerged$inflow <- round(L239inflowmerged$inflow, digits = 0)
View(L239inflowmerged)
write.csv(L239inflowmerged, file = "L239_InflowVolume_Merged_2010to2016.csv", row.names = F)
L239inflow <- read.csv("L239_InflowVolume_1971to2016.csv")
head(L239inflow)
L239inflowmerged <- ddply(L239inflow, .(date), summarize, inflow = mean(mean.daily.discharge))
L239inflowmerged$date <- as.Date(L239inflowmerged$date, format = "%m/%d/%y")
View(L239inflowmerged)
L239inflowmerged <- arrange(L239inflowmerged, date)
L239inflowmerged$inflow <- L239inflowmerged$inflow * 60 * 60 * 24
L239inflowmerged$inflow <- round(L239inflowmerged$inflow, digits = 0)
write.csv(L239inflowmerged, file = "L239_InflowVolume_Merged_2010to2016.csv", row.names = F)
write.csv(L239inflowmerged, file = "L239_InflowVolume_Merged_1970to2016.csv", row.names = F)
Wind <- read.csv("WindSpeed_hourly_1969-2016.csv")
head(Wind)
winddaily <- ddply(Wind, .(measurement.date), summarize, dailyavgwind = mean(speed.at.10m))
View(winddaily)
winddaily$measurement.date <- as.Date(winddaily$measurement.date, format = "%m/%d/%y")
View(winddaily)
winddaily <- arrange(winddaily, measurement.date)
View(winddaily)
View(winddaily)
winddaily$dailyavgwind <- round(winddaily$dailyavgwind, digits = 1)
winddaily <- mutate(winddaily, windoverwater= dailyavgwind * 0.527)
winddaily$windoverwater <- round(winddaily$windoverwater, digits = 1)
View(winddaily)
winddaily$dailyavgwind <- winddaily$dailyavgwind * 1000 / 3600
winddaily$windoverwater <- winddaily$windoverwater * 1000 / 3600
winddaily$dailyavgwind <- round(winddaily$dailyavgwind, digits = 1)
winddaily$windoverwater <- round(winddaily$windoverwater, digits = 1)
write.csv(humiditydaily, file = "WindDaily_1969to2016.csv", row.names = F)
write.csv(winddaily, file = "WindDaily_1969to2016.csv", row.names = F)
setwd("/Users/krsalkgu/Documents/SourceTree/L227/IO")
setwd("~/Documents/SourceTree/Lake227/IO")
dataset = read.csv("Inflow_for_interpolation.csv")
attach(dataset)
head(dataset)
library(zoo)
CloudI = na.aggregate(Cloud)
HumidityI = na.aggregate(Humidity)
AirPressureI = na.aggregate(AirPressure)
WindSpeedI = na.aggregate(WindSpeed)
pHI = na.aggregate(pH)
AirTempI = na.approx(AirTemp)
InflowTempI = na.approx(InflowTemp)
TPI = na.approx(TP)
DOCI = na.approx(DOC)
NO3I = na.approx(NO3)
NH4I = na.approx(NH4)
SO4I = na.approx(SO4)
Fe2I = na.approx(Fe2)
Ca2I = na.approx(Ca2)
Fe3I = na.approx(Fe3)
SiO2I = na.approx(SiO2)
summary(dataset$AirPressure)
dataset = read.csv("Inflow_for_interpolation.csv")
attach(dataset)
head(dataset)
library(zoo)
CloudI = na.aggregate(Cloud)
HumidityI = na.aggregate(Humidity)
AirPressureI = na.aggregate(AirPressure)
WindSpeedI = na.aggregate(WindSpeed)
pHI = na.aggregate(pH)
AirTempI = na.approx(AirTemp)
InflowTempI = na.approx(InflowTemp)
TPI = na.approx(TP)
DOCI = na.approx(DOC)
NO3I = na.approx(NO3)
NH4I = na.approx(NH4)
SO4I = na.approx(SO4)
Fe2I = na.approx(Fe2)
Ca2I = na.approx(Ca2)
Fe3I = na.approx(Fe3)
SiO2I = na.approx(SiO2)
InterpolatedData = data.frame(Year, Month, Day, CloudI, AirTempI, HumidityI, AirPressureI, WindSpeedI, InflowTempI, TPI, DOCI, NO3I, NH4I, SO4I, Fe2I, Ca2I, pHI, Fe3I, SiO2I)
dataset = read.csv("Inflow_for_interpolation.csv")
attach(dataset)
head(dataset)
library(zoo)
CloudI = na.aggregate(Cloud)
HumidityI = na.aggregate(Humidity)
AirPressureI = na.aggregate(AirPressure)
WindSpeedI = na.aggregate(WindSpeed)
pHI = na.aggregate(pH)
AirTempI = na.approx(AirTemp)
InflowTempI = na.approx(InflowTemp)
TPI = na.approx(TP)
DOCI = na.approx(DOC)
NO3I = na.approx(NO3)
NH4I = na.approx(NH4)
SO4I = na.approx(SO4)
Fe2I = na.approx(Fe2)
Ca2I = na.approx(Ca2)
Fe3I = na.approx(Fe3)
SiO2I = na.approx(SiO2)
InterpolatedData = data.frame(Year, Month, Day, CloudI, AirTempI, HumidityI, AirPressureI, WindSpeedI, InflowTempI, TPI, DOCI, NO3I, NH4I, SO4I, Fe2I, Ca2I, pHI, Fe3I, SiO2I)
if(InterpolatedData$DOCI > 50000){
InterpolatedData$DOCI == 50000
}
InterpolatedData$DOCI[InterpolatedData$DOCI > 50000] <- 50000
View(InterpolatedData)
write.csv(InterpolatedData, "Inflow_Interpolated.csv")
write.csv(InterpolatedData, "Inflow_Interpolated.csv", rownames = F)
write.csv(InterpolatedData, "Inflow_Interpolated.csv", row.names = F)
