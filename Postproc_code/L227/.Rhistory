# tidy! - part 2: match model time and observational time
library(dplyr)
mod.match <- inner_join(obs,mod, by = "date")
mod.match.temp <- inner_join(obs_temp, mod, by = "date")
obs.totaltempa <- data.frame(cbind(mod.match.temp$obs.Temp1m, mod.match.temp$obs.Temp4m, mod.match.temp$obs.Temp9m))
obs.totaltemp <- stack(obs.totaltempa)
mod.totaltempa <- data.frame(cbind(mod.match.temp$mod.Temp1m, mod.match.temp$mod.Temp4m, mod.match.temp$mod.Temp9m))
mod.totaltemp <- stack(mod.totaltempa)
totaltemp <- data.frame(cbind(obs.totaltemp[,1], mod.totaltemp[,1]))
colnames(totaltemp) <- c("TempObs","TempMod")
p4 <- ggplot(mod.match.temp, aes(x = date)) +
geom_point(aes(y = obs.Temp1m, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.Temp1m, col = "Modeled"), size = 0.5) +
ylim(0,30) +
ylab(expression("Temperature " ( degree*C))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9))
p4
p5 <- ggplot(mod.match.temp, aes(x = date)) +
geom_point(aes(y = obs.Temp4m, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.Temp4m, col = "Modeled"), size = 0.5) +
ylim(0,30) +
ylab(expression("Temperature " ( degree*C))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9))
p6 <- ggplot(mod.match.temp, aes(x = date)) +
geom_point(aes(y = obs.Temp9m, col = "Observed"), pch = 19, size = 1) +
geom_line(aes(y = mod.Temp9m, col = "Modeled"), size = 0.5) +
ylim(0,10) +
ylab(expression("Temperature " ( degree*C))) +
xlab(" ") +
scale_colour_manual("",
breaks = c("Observed", "Modeled"),
values = c("black", "red")) +
theme(legend.position = c(0.9,0.9))
p5
p6
tempregression <- lm(totaltemp$TempObs ~ totaltemp$TempMod)
summary(tempregression)
mse <- mean(residuals(tempregression)^2)
rmse <- sqrt(mse)
p6 <- ggplot(totaltemp, aes(x = TempObs, y = TempMod)) +
geom_point(pch = 19, size = 1.5) +
geom_abline(slope=1, intercept=0) +
scale_x_continuous(limits=c(0,30)) + scale_y_continuous(limits=c(0,30)) +
xlab(expression("Temperature Observed " ( degree*C))) +
ylab(expression("Temperature Modeled " ( degree*C))) +
scale_color_distiller(palette="YlGnBu") +
theme(legend.position=c(0.9, 0.8))
p6
rmse
p6
setwd("/Users/krsalkgu/Documents/SourceTree/L227/Postproc_code/L227")
NtoP <- read.csv("NP_Stoichiometry.csv")
attach(NtoP)
head(NtoP)
theme_set(theme_std())
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(axis.ticks = element_line(colour = "black", size = 1),
legend.key = element_rect(colour = "white"),
panel.background = element_rect(fill = "white", colour = NA),
panel.border = element_rect(fill = NA, colour = NA),
axis.line = element_line(size = 0.5, colour = "black"),
panel.grid.major = element_line(NA),
panel.grid.minor = element_line(NA),
strip.background = element_rect(fill = "grey80", colour = "grey50", size = 0.2),
axis.text  = element_text(size=rel(0.9)),
axis.title.x = element_text(margin = unit(c(3, 0, 0, 0), "mm"),size=rel(1)),
axis.title.y = element_text(margin = unit(c(0, 3, 0, 0), "mm"),size=rel(1), angle = 90),
strip.text = element_text(size = rel(1.15), colour = "black", face = "bold"),
plot.margin=unit(c(10,10,10,10),"pt")
)
library(ggplot2)
theme_std <- function (base_size = 16, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(axis.ticks = element_line(colour = "black", size = 1),
legend.key = element_rect(colour = "white"),
panel.background = element_rect(fill = "white", colour = NA),
panel.border = element_rect(fill = NA, colour = NA),
axis.line = element_line(size = 0.5, colour = "black"),
panel.grid.major = element_line(NA),
panel.grid.minor = element_line(NA),
strip.background = element_rect(fill = "grey80", colour = "grey50", size = 0.2),
axis.text  = element_text(size=rel(0.9)),
axis.title.x = element_text(margin = unit(c(3, 0, 0, 0), "mm"),size=rel(1)),
axis.title.y = element_text(margin = unit(c(0, 3, 0, 0), "mm"),size=rel(1), angle = 90),
strip.text = element_text(size = rel(1.15), colour = "black", face = "bold"),
plot.margin=unit(c(10,10,10,10),"pt")
)
}
theme_set(theme_std())
TN:TP <- TN.TP.1*30.97/14.01
TN.TP.1
TNtoTP <- TN.TP.1*30.97/14.01
head(NtoP)
TNtoTP <- TN.TP.1*30.97/14.01
PNtoPP <- PN.PP.1*30.97/14.01
DINtoTDP <- DIN.TDP.1*30.97/14.01
TDNtoTDP <- TDN.TDP.1*30.97/14.01
NtoPmolar <- data.frame(Start.Date, TNtoTP, PNtoPP, DINtoTDP, TDNtoTDP)
head(NtoPmolar)
ggplot(NtoPmolar, aes(x = Start.Date)) +
geom_point(aes(y = TNtoTP), pch = 19, size = 1) +
geom_line(aes(y = TNtoTP), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPmolar, aes(x = Start.Date)) +
geom_point(aes(y = TNtoTP), pch = 19, size = 1) +
geom_point(aes(y = TDNtoTDP), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPmolar, aes(x = Start.Date)) +
geom_point(aes(y = TNtoTP, color="red"), pch = 19, size = 1) +
geom_point(aes(y = TDNtoTDP, color="black"), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPmolar, aes(x = Start.Date)) +
geom_point(aes(y = TNtoTP, col="red"), size = 0.5) +
geom_point(aes(y = TDNtoTDP, col="black"), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPmolar, aes(x = Start.Date)) +
geom_point(aes(y = TNtoTP), size = 0.5) +
geom_point(aes(y = TDNtoTDP), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9)) +
scale_color_manual("black", "red")
ggplot(NtoPmolar, aes(x = Start.Date)) +
geom_point(aes(y = TNtoTP), size = 0.5) +
geom_point(aes(y = TDNtoTDP), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9)) +
scale_color_manual(values=c("black", "red"))
ggplot(NtoPmolar, aes(x = Start.Date)) +
geom_point(aes(y = TNtoTP, col="Total"), size = 0.5) +
geom_point(aes(y = TDNtoTDP, col="Dissolved"), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9)) +
scale_colour_manual("", breaks = c("Total", "Dissolved"), values = c("black", "red")) +
ggplot(NtoPmolar, aes(x = Start.Date)) +
geom_point(aes(y = TNtoTP, col="Total"), size = 0.5) +
geom_point(aes(y = TDNtoTDP, col="Dissolved"), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9)) +
scale_colour_manual("", breaks = c("Total", "Dissolved"), values = c("black", "red"))
setwd("/Users/krsalkgu/Documents/SourceTree/L227/Postproc_code/L227")
NtoPLake <- read.csv("NP_Stoichiometry_L227.csv")
attach(NtoPLake)
head(NtoPLake)
NtoPInflow <- read.csv("NP_Stoichiometry_Inflow")
attach(NtoPInflow)
head(NtoPInflow)
setwd("/Users/krsalkgu/Documents/SourceTree/L227/Postproc_code/L227")
NtoPInflow <- read.csv("NP_Stoichiometry_Inflow.csv")
attach(NtoPInflow)
head(NtoPInflow)
NtoPLake <- read.csv("NP_Stoichiometry_L227.csv")
attach(NtoPLake)
head(NtoPLake)
Fert_TP_molar <- Fert_TP/30.97
Inflow_TP_molar <- Inflow_TP/30.97
Fert_TN_molar <- Fert_TN/14.01
Inflow_TN_molar <- Inflow_TN/14.01
NO3_molar <- NO3/14.01
NH4_molar <- NH4/14.01
DIN_molar <- NO3_molar + NH4_molar
PN_molar <- PN/14.01
TDN_molar <- TDN/14.01
PP_molar <- PP/30.97
TDP_molar <- TDP/30.97
Input_TN_molar <- Fert_TN_molar + Inflow_TN_molar
Input_TP_molar <- Fert_TP_molar + Inflow_TP_molar
TN_molar <- TDN_molar + PN_molar
TP_molar <- TDP_molar + PP_molar
Fert_NtoP <- Fert_TN_molar/Fert_TP_molar
Inflow_NtoP <- Inflow_TN_molar/Inflow_TP_molar
Input_NtoP <- Input_TN_molar/Input_TP_molar
DINtoTDP <- DIN_molar/TDP_molar
TDNtoTDP <- TDN_molar/TDP_molar
PNtoPP <- PN_molar/PP_molar
TNtoTP <- TN_molar/TP_molar
NtoPlake <- data.frame(NtoPLake$Date, TNtoTP, PNtoPP, DINtoTDP, TDNtoTDP)
NtoPInput <- data.frame(NtoPInflow$Date, Fert_NtoP, Inflow_NtoP, Input_NtoP)
library(ggplot2)
theme_std <- function (base_size = 16, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(axis.ticks = element_line(colour = "black", size = 1),
legend.key = element_rect(colour = "white"),
panel.background = element_rect(fill = "white", colour = NA),
panel.border = element_rect(fill = NA, colour = NA),
axis.line = element_line(size = 0.5, colour = "black"),
panel.grid.major = element_line(NA),
panel.grid.minor = element_line(NA),
strip.background = element_rect(fill = "grey80", colour = "grey50", size = 0.2),
axis.text  = element_text(size=rel(0.9)),
axis.title.x = element_text(margin = unit(c(3, 0, 0, 0), "mm"),size=rel(1)),
axis.title.y = element_text(margin = unit(c(0, 3, 0, 0), "mm"),size=rel(1), angle = 90),
strip.text = element_text(size = rel(1.15), colour = "black", face = "bold"),
plot.margin=unit(c(10,10,10,10),"pt"))}
theme_set(theme_std())
View(NtoPLake)
View(NtoPLake)
View(NtoPlake)
View(NtoPlake)
NtoPinsitu <- data.frame(NtoPLake$Date, TNtoTP, PNtoPP, DINtoTDP, TDNtoTDP)
NtoPinput <- data.frame(NtoPInflow$Date, Fert_NtoP, Inflow_NtoP, Input_NtoP)
View(NtoPinsitu)
View(NtoPinsitu)
ggplot(NtoPinsitu, aes(x = Date)) +
geom_point(aes(y = TNtoTP, col="Total"), size = 0.5) +
geom_point(aes(y = TDNtoTDP, col="Dissolved"), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9)) +
scale_colour_manual("", breaks = c("Total", "Dissolved"), values = c("black", "red"))
class(NtoPLake$Date)
NtoPinsitu <- data.frame(as.date(NtoPLake$Date), TNtoTP, PNtoPP, DINtoTDP, TDNtoTDP)
help(as.date)
NtoPinsitu <- data.frame(as.Date(NtoPLake$Date), TNtoTP, PNtoPP, DINtoTDP, TDNtoTDP)
NtoPLake$Date
help(as.Date)
NtoPinsitu <- data.frame(as.Date(NtoPLake$Date, "%m/%d/%Y"), TNtoTP, PNtoPP, DINtoTDP, TDNtoTDP)
class(NtoPinsitu$Date)
NtoPinsitu <- data.frame(as.Date(NtoPLake$Date, "%m/%d/%Y"), TNtoTP, PNtoPP, DINtoTDP, TDNtoTDP)
View(NtoPinsitu)
View(NtoPinsitu)
NtoPLake <- read.csv("NP_Stoichiometry_L227.csv")
attach(NtoPLake)
head(NtoPLake)
NtoPInflow <- read.csv("NP_Stoichiometry_Inflow.csv")
attach(NtoPInflow)
head(NtoPInflow)
#Change concentrations from mass (ug/L) to molar (umol/L)
Fert_TP_molar <- Fert_TP/30.97
Inflow_TP_molar <- Inflow_TP/30.97
Fert_TN_molar <- Fert_TN/14.01
Inflow_TN_molar <- Inflow_TN/14.01
NO3_molar <- NO3/14.01
NH4_molar <- NH4/14.01
DIN_molar <- NO3_molar + NH4_molar
PN_molar <- PN/14.01
TDN_molar <- TDN/14.01
PP_molar <- PP/30.97
TDP_molar <- TDP/30.97
TN_molar <- TDN_molar + PN_molar
TP_molar <- TDP_molar + PP_molar
#Combine inflows + fertilization
Input_TN_molar <- Fert_TN_molar + Inflow_TN_molar
Input_TP_molar <- Fert_TP_molar + Inflow_TP_molar
#Create N:P stoichiometric ratios in lake and inputs
Fert_NtoP <- Fert_TN_molar/Fert_TP_molar
Inflow_NtoP <- Inflow_TN_molar/Inflow_TP_molar
Input_NtoP <- Input_TN_molar/Input_TP_molar
DINtoTDP <- DIN_molar/TDP_molar
TDNtoTDP <- TDN_molar/TDP_molar
PNtoPP <- PN_molar/PP_molar
TNtoTP <- TN_molar/TP_molar
Datelake <- as.Date(NtoPLake$Date, "%m/%d/%Y")
class(DateLake)
class(Datelake)
Dateinflow <- as.Date(NtoPInflow$Date, "%m/%d/%Y")
class(Dateinflow)
NtoPinsitu <- data.frame(Datelake, TNtoTP, PNtoPP, DINtoTDP, TDNtoTDP)
NtoPinput <- data.frame(Dateinflow, Fert_NtoP, Inflow_NtoP, Input_NtoP)
ggplot(NtoPinsitu, aes(x = Date)) +
geom_point(aes(y = TNtoTP, col="Total"), size = 0.5) +
geom_point(aes(y = TDNtoTDP, col="Dissolved"), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9)) +
scale_colour_manual("", breaks = c("Total", "Dissolved"), values = c("black", "red"))
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = TNtoTP, col="Total"), size = 0.5) +
geom_point(aes(y = TDNtoTDP, col="Dissolved"), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9)) +
scale_colour_manual("", breaks = c("Total", "Dissolved"), values = c("black", "red"))
View(NtoPinsitu)
View(NtoPinsitu)
Datelake <- as.Date(NtoPLake$Date, "%m/%d/%y")
head(NtoPLake)
NtoPLake <- read.csv("NP_Stoichiometry_L227.csv")
attach(NtoPLake)
head(NtoPLake)
NtoPInflow <- read.csv("NP_Stoichiometry_Inflow.csv")
attach(NtoPInflow)
head(NtoPInflow)
#Change concentrations from mass (ug/L) to molar (umol/L)
Fert_TP_molar <- Fert_TP/30.97
Inflow_TP_molar <- Inflow_TP/30.97
Fert_TN_molar <- Fert_TN/14.01
Inflow_TN_molar <- Inflow_TN/14.01
NO3_molar <- NO3/14.01
NH4_molar <- NH4/14.01
DIN_molar <- NO3_molar + NH4_molar
PN_molar <- PN/14.01
TDN_molar <- TDN/14.01
PP_molar <- PP/30.97
TDP_molar <- TDP/30.97
TN_molar <- TDN_molar + PN_molar
TP_molar <- TDP_molar + PP_molar
#Combine inflows + fertilization
Input_TN_molar <- Fert_TN_molar + Inflow_TN_molar
Input_TP_molar <- Fert_TP_molar + Inflow_TP_molar
#Create N:P stoichiometric ratios in lake and inputs
Fert_NtoP <- Fert_TN_molar/Fert_TP_molar
Inflow_NtoP <- Inflow_TN_molar/Inflow_TP_molar
Input_NtoP <- Input_TN_molar/Input_TP_molar
DINtoTDP <- DIN_molar/TDP_molar
TDNtoTDP <- TDN_molar/TDP_molar
PNtoPP <- PN_molar/PP_molar
TNtoTP <- TN_molar/TP_molar
Datelake <- as.Date(NtoPLake$Date, "%m/%d/%y")
Datelake
NtoPLake <- read.csv("NP_Stoichiometry_L227.csv")
attach(NtoPLake)
head(NtoPLake)
NtoPInflow <- read.csv("NP_Stoichiometry_Inflow.csv")
attach(NtoPInflow)
head(NtoPInflow)
Fert_TP_molar <- Fert_TP/30.97
Inflow_TP_molar <- Inflow_TP/30.97
Fert_TN_molar <- Fert_TN/14.01
Inflow_TN_molar <- Inflow_TN/14.01
NO3_molar <- NO3/14.01
NH4_molar <- NH4/14.01
DIN_molar <- NO3_molar + NH4_molar
PN_molar <- PN/14.01
TDN_molar <- TDN/14.01
PP_molar <- PP/30.97
TDP_molar <- TDP/30.97
TN_molar <- TDN_molar + PN_molar
TP_molar <- TDP_molar + PP_molar
#Combine inflows + fertilization
Input_TN_molar <- Fert_TN_molar + Inflow_TN_molar
Input_TP_molar <- Fert_TP_molar + Inflow_TP_molar
Fert_NtoP <- Fert_TN_molar/Fert_TP_molar
Inflow_NtoP <- Inflow_TN_molar/Inflow_TP_molar
Input_NtoP <- Input_TN_molar/Input_TP_molar
DINtoTDP <- DIN_molar/TDP_molar
TDNtoTDP <- TDN_molar/TDP_molar
PNtoPP <- PN_molar/PP_molar
TNtoTP <- TN_molar/TP_molar
#Convert dates from factor to date format
Datelake <- as.Date(NtoPLake$Date, "%m/%d/%y")
Dateinflow <- as.Date(NtoPInflow$Date, "%m/%d/%Y")
Datelake
NtoPinsitu <- data.frame(Datelake, TNtoTP, PNtoPP, DINtoTDP, TDNtoTDP)
NtoPinput <- data.frame(Dateinflow, Fert_NtoP, Inflow_NtoP, Input_NtoP)
library(ggplot2)
theme_std <- function (base_size = 16, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(axis.ticks = element_line(colour = "black", size = 1),
legend.key = element_rect(colour = "white"),
panel.background = element_rect(fill = "white", colour = NA),
panel.border = element_rect(fill = NA, colour = NA),
axis.line = element_line(size = 0.5, colour = "black"),
panel.grid.major = element_line(NA),
panel.grid.minor = element_line(NA),
strip.background = element_rect(fill = "grey80", colour = "grey50", size = 0.2),
axis.text  = element_text(size=rel(0.9)),
axis.title.x = element_text(margin = unit(c(3, 0, 0, 0), "mm"),size=rel(1)),
axis.title.y = element_text(margin = unit(c(0, 3, 0, 0), "mm"),size=rel(1), angle = 90),
strip.text = element_text(size = rel(1.15), colour = "black", face = "bold"),
plot.margin=unit(c(10,10,10,10),"pt"))}
theme_set(theme_std())
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = TNtoTP, col="Total"), size = 0.5) +
geom_point(aes(y = TDNtoTDP, col="Dissolved"), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9)) +
scale_colour_manual("", breaks = c("Total", "Dissolved"), values = c("black", "red"))
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = TNtoTP), size = 0.5) +
geom_line(aes(y = TNtoTP)) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9)) +
scale_colour_manual("", breaks = c("Total", "Dissolved"), values = c("black", "red"))
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = TNtoTP), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9)) +
scale_colour_manual("", breaks = c("Total", "Dissolved"), values = c("black", "red"))
TNtoTPbydate <- lm(TNtoTP ~ Datelake)
summary(TNtoTPbydate)
install.packages("strucchange")
library(strucchange)
breakpoints (TNtoTP ~ Datelake, data = NtoPinsitu)
help("breakpoints")
data("Nile")
plot(Nile)
a = breakpoints (TNtoTP ~ Datelake, data = NtoPinsitu)
breakdates(a)
breakdates(a, format.times=T)
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = TNtoTP), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9)) +
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = TNtoTP), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = TDNtoTDP), size = 0.5) +
ylim(0,200) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = TNtoTP), size = 0.5) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = TDNtoTDP), size = 0.5) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = TDNtoTDP), size = 0.5) +
ylim(0,500) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = DINtoTDP), size = 0.5) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = DINtoTDP), size = 0.5) +
ylim(0,500) +
ylab(expression(TN:TP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = PNtoPP), size = 0.5) +
ylab(expression(PN:PP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ylim(0,200) +
ggplot(NtoPinsitu, aes(x = Datelake)) +
geom_point(aes(y = PNtoPP), size = 0.5) +
ylim(0,200) +
ylab(expression(PN:PP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinput, aes(x = Dateinflow)) +
geom_point(aes(y = Fert_NtoP), size = 0.5) +
ylim(0,200) +
ylab(expression(FertN:FertP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinput, aes(x = Dateinflow)) +
geom_point(aes(y = Fert_NtoP), size = 0.5) +
ylim(0,50) +
ylab(expression(FertN:FertP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinput, aes(x = Dateinflow)) +
geom_point(aes(y = Inflow_NtoP), size = 0.5) +
ylim(0,50) +
ylab(expression(InflowN:InflowP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinput, aes(x = Dateinflow)) +
geom_point(aes(y = Inflow_NtoP), size = 0.5) +
ylab(expression(InflowN:InflowP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
ggplot(NtoPinput, aes(x = Dateinflow)) +
geom_point(aes(y = Input_NtoP), size = 0.5) +
ylim(0,50) +
ylab(expression(InputN:InputP)) +
xlab(" ") +
theme(legend.position = c(0.9,0.9))
